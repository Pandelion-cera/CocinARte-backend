name: Deploy Java Backend to AWS Copilot

on:
  push:
    branches: [ main ]
    paths:
      - 'java/**'
      - '.github/workflows/deploy-java-backend.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'java/**'

env:
  AWS_REGION: us-east-1
  COPILOT_APPLICATION_NAME: cocinarte

jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./java

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run tests
      run: ./mvnw test

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: ./java

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Install AWS Copilot CLI
      run: |
        curl -Lo copilot https://github.com/aws/copilot-cli/releases/latest/download/copilot-linux
        chmod +x copilot
        sudo mv copilot /usr/local/bin

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build application
      run: ./mvnw clean package -DskipTests

    - name: Deploy environment (if needed)
      run: |
        if ! copilot env show --name production > /dev/null 2>&1; then
          echo "Environment 'production' does not exist. Creating it..."
          copilot env deploy --name production
        else
          echo "Environment 'production' already exists."
        fi

    - name: Deploy service
      run: copilot svc deploy --name api --env production

    - name: Get service URL
      run: |
        URL=$(copilot svc show --name api --env production --json | jq -r '.configurations[0].environments[] | select(.name=="production") | .routes[0]')
        echo "ðŸš€ Service deployed successfully!"
        echo "ðŸ“¡ Public API URL: https://$URL"
        echo "SERVICE_URL=https://$URL" >> $GITHUB_ENV

    - name: Comment PR with URL
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'ðŸš€ Java Backend deployed successfully!\n\nðŸ“¡ **Public API URL:** ${{ env.SERVICE_URL }}\n\nâœ… Health check: ${{ env.SERVICE_URL }}/api/recognize/test'
          })